#convert bid to tender indicators
output <- merge ( output, calculateTenderFrequentVendorInvitationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderFrequentVendorRecommendationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderOverpricedVendorRecommendationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderPriceSimilarityIndicator(bidIndicators), all = TRUE)
#calcualte overall indicator
output <- calculateTenderSuspicionIndicator(output)
return(output)
}
################################################## calculate Tender Suspicion Indicator ############################################
calculateTenderSuspicionIndicator <- function(tenderIndicators) {
tenderIndicators$tenderSuspicionIndicator <- (tenderIndicators$TenderLimitedTenderIndicator * 0.1
+ tenderIndicators$TenderConsumablesTenderIndicator * 0.1
+ tenderIndicators$TenderSingleBidIndicator * 0.1
+ tenderIndicators$TenderQuoteBorderValueIndicator * 0.1
+ tenderIndicators$TenderQuickClosingIndicator * 0.1
+ tenderIndicators$TenderFastEvaluationIndicator * 0.1
+ tenderIndicators$TenderFrequentVendorInvitationIndicator * 0.1
+ tenderIndicators$TenderFrequentVendorRecommendationIndicator * 0.1
+ tenderIndicators$TenderOverpricedVendorRecommendationIndicator * 0.1
+ tenderIndicators$TenderPriceSimilarityIndicator * 0.1)
return(tenderIndicators)
}
######################################################## calculate Tender Indicators ###############################################
######################################################## calculate Tender Indicators ###############################################
calculateTenderLimitedTenderIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
limited_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender[which(data_tender$Type.of.Tender==2),],length)
colnames(limited_requester_tender_count) <- c("Requestor","limited_requester_tender_count")
requester_tenders <- merge(total_requester_tender_count, limited_requester_tender_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$limited_requester_tender_count[which(is.na(requester_tenders$limited_requester_tender_count))] <- 0
output <- data_tender
output <- merge(output, requester_tenders, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
output$TenderLimitedTenderIndicator <- output$limited_requester_tender_count / output$total_requester_tender_count
output <- output[,c("Tender.Reference.No.","TenderLimitedTenderIndicator")]
return(output)
}
calculateTenderConsumablesTenderIndicator <-function() {
output <- data_tender
output$TenderConsumablesTenderIndicator <- 0
output$TenderConsumablesTenderIndicator[which(output$Type.of.Purchase == 2)] <- 1
output <- output[,c("Tender.Reference.No.","TenderConsumablesTenderIndicator")]
return(output)
}
calculateTenderSingleBidIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
single_bid_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender[which(data_tender$No..of.Tender.Submission.Received==1),],length)
colnames(single_bid_requester_tender_count) <- c("Requestor","single_bid_requester_tender_count")
requester_tenders <- merge(total_requester_tender_count, single_bid_requester_tender_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$single_bid_requester_tender_count[which(is.na(requester_tenders$single_bid_requester_tender_count))] <- 0
output <- data_tender
output <- merge(output, requester_tenders, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
output$TenderSingleBidIndicator <- output$single_bid_requester_tender_count / output$total_requester_tender_count
output <- output[,c("Tender.Reference.No.","TenderSingleBidIndicator")]
return(output)
}
calculateTenderQuoteBorderValueIndicator <-function() {
tender_transaction_lower_range <- 70000
output <- data_tender
output$TenderQuoteBorderValueIndicator <- 0
output$TenderQuoteBorderValueIndicator[which(output$Approved.Tender.Estimated < tender_transaction_lower_range)] <- 1 - ((tender_transaction_lower_range - output$Approved.Tender.Estimated[which(output$Approved.Tender.Estimated < tender_transaction_lower_range)])  / tender_transaction_lower_range)
output <- output[,c("Tender.Reference.No.","TenderQuoteBorderValueIndicator")]
return(output)
}
calculateTenderQuickClosingIndicator <-function() {
output <- data_tender
output$days_diff <- as.numeric(difftime(output$Tender.Closing.Date, output$Tender.Notice.Date, units = "days"))
output$daysdiff_sd_diff <- abs(mean(output$days_diff, na.rm = TRUE) - output$days_diff) / sd(output$days_diff, na.rm = TRUE)
daysdiff_sd_diff_max <- max(output$daysdiff_sd_diff, na.rm = TRUE)
output$TenderQuickClosingIndicator <- 1 - (output$daysdiff_sd_diff/ daysdiff_sd_diff_max)
output <- output[,c("Tender.Reference.No.","TenderQuickClosingIndicator")]
output$TenderQuickClosingIndicator[which(is.na(output$TenderQuickClosingIndicator))] <- 0
return(output)
}
calculateTenderFastEvaluationIndicator <-function() {
output <- data_tender
output_approvals <-  aggregate(Created.Date ~ Tender.Reference.No., data_approval, max, na.rm= TRUE)
output <- merge(output, output_approvals, by = c("Tender.Reference.No.","Tender.Reference.No."),all.x = TRUE, all.y = FALSE)
output$days_diff <- as.numeric(difftime(output$Created.Date, output$Tender.Closing.Date, units = "days"))
output$daysdiff_sd_diff <- abs(mean(output$days_diff, na.rm = TRUE) - output$days_diff) / sd(output$days_diff, na.rm = TRUE)
daysdiff_sd_diff_max <- max(output$daysdiff_sd_diff, na.rm = TRUE)
output$TenderFastEvaluationIndicator <- 1 - (output$daysdiff_sd_diff/ daysdiff_sd_diff_max)
output <- output[,c("Tender.Reference.No.","TenderFastEvaluationIndicator")]
output$TenderFastEvaluationIndicator[which(is.na(output$TenderFastEvaluationIndicator))] <- 0
return(output)
}
############################ tender indicators converted from Big Indicators ############################
calculateTenderFrequentVendorInvitationIndicator <-function(bidIndicators) {
output <- data_tender
TenderFrequentVendorInvitationIndicator <- aggregate(BidFrequentVendorInvitationIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderFrequentVendorInvitationIndicator) <- c("Tender.Reference.No.","TenderFrequentVendorInvitationIndicator")
output <- merge(output, TenderFrequentVendorInvitationIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderFrequentVendorInvitationIndicator")]
output$TenderFrequentVendorInvitationIndicator[which(is.na(output$TenderFrequentVendorInvitationIndicator))] <- 0
return(output)
}
calculateTenderFrequentVendorRecommendationIndicator <-function(bidIndicators) {
output <- data_tender
TenderFrequentVendorRecommendationIndicator <- aggregate(BidFrequentVendorRecommendationIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderFrequentVendorRecommendationIndicator) <- c("Tender.Reference.No.","TenderFrequentVendorRecommendationIndicator")
output <- merge(output, TenderFrequentVendorRecommendationIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderFrequentVendorRecommendationIndicator")]
output$TenderFrequentVendorRecommendationIndicator[which(is.na(output$TenderFrequentVendorRecommendationIndicator))] <- 0
return(output)
}
calculateTenderOverpricedVendorRecommendationIndicator <-function(bidIndicators) {
output <- data_tender
TenderOverpricedVendorRecommendationIndicator <- aggregate(BidOverpricedVendorRecommendationIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderOverpricedVendorRecommendationIndicator) <- c("Tender.Reference.No.","TenderOverpricedVendorRecommendationIndicator")
output <- merge(output, TenderOverpricedVendorRecommendationIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderOverpricedVendorRecommendationIndicator")]
output$TenderOverpricedVendorRecommendationIndicator[which(is.na(output$TenderOverpricedVendorRecommendationIndicator))] <- 0
return(output)
}
calculateTenderPriceSimilarityIndicator <-function(bidIndicators) {
output <- data_tender
TenderPriceSimilarityIndicator <- aggregate(BidPriceSimilarityIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderPriceSimilarityIndicator) <- c("Tender.Reference.No.","TenderPriceSimilarityIndicator")
output <- merge(output, TenderPriceSimilarityIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderPriceSimilarityIndicator")]
output$TenderPriceSimilarityIndicator[which(is.na(output$TenderPriceSimilarityIndicator))] <- 0
return(output)
}
######################################################## calculate Bid Indicators ###############################################
calculateBidIndicators <- function() {
output <- data_bid[,c("bid_id","Tender.Reference.No.","Tenderer.Name")]
output <- merge ( output, calculateBidFrequentVendorInvitationIndicator(), by = c("bid_id"), all = TRUE)
output <- merge ( output, calculateBidFrequentVendorRecommendationIndicator(), by = c("bid_id"), all = TRUE)
output <- merge ( output, calculateBidOverpricedVendorRecommendationIndicator(), by = c("bid_id"), all = TRUE)
output <- merge ( output, calculateBidPriceSimilarityIndicator(), by = c("bid_id"), all = TRUE)
return(output)
}
######################################################## calculate Bid Indicators ###############################################
calculateBidFrequentVendorInvitationIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
output_bid <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Requestor")], by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
vendor_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor+Tenderer.Name,output_bid,length)
colnames(vendor_requester_tender_count) <- c("Requestor","Tenderer.Name","vendor_requester_tender_count")
requester_tenders <- merge(total_requester_tender_count, vendor_requester_tender_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$vendor_requester_tender_count[which(is.na(requester_tenders$vendor_requester_tender_count))] <- 0
output <- merge(output_bid, requester_tenders, by = c("Requestor","Tenderer.Name"), all.x = TRUE, all.y=FALSE)
output$BidFrequentVendorInvitationIndicator <- output$vendor_requester_tender_count / output$total_requester_tender_count
output$BidFrequentVendorInvitationIndicator[which(is.na(output$BidFrequentVendorInvitationIndicator))] <- 0
output <- output[,c("bid_id","BidFrequentVendorInvitationIndicator")]
return(output)
}
calculateBidFrequentVendorRecommendationIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
output_bid <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Requestor")], by = c("Tender.Reference.No.","Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
vendor_requester_recommendation_count <- aggregate(Tender.Reference.No.~Requestor+Tenderer.Name,output_bid[which(output_bid$Tender.Recommended.by.Requestor == "X"),],length)
colnames(vendor_requester_recommendation_count) <- c("Requestor","Tenderer.Name","vendor_requester_recommendation_count")
requester_tenders <- merge(total_requester_tender_count, vendor_requester_recommendation_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$vendor_requester_recommendation_count[which(is.na(requester_tenders$vendor_requester_recommendation_count))] <- 0
output <- merge(output_bid, requester_tenders, by = c("Requestor","Tenderer.Name"), all.x = TRUE, all.y=FALSE)
output$BidFrequentVendorRecommendationIndicator <- output$vendor_requester_recommendation_count / output$total_requester_tender_count
output$BidFrequentVendorRecommendationIndicator[which(is.na(output$BidFrequentVendorRecommendationIndicator))] <- 0
output <- output[,c("bid_id","BidFrequentVendorRecommendationIndicator")]
return(output)
}
calculateBidOverpricedVendorRecommendationIndicator <-function() {
output <- data_bid
tender_lowest_price <- aggregate(Tender.Base.Offer~Tender.Reference.No.,output,max,na.rm=TRUE)
colnames(tender_lowest_price) <- c("Tender.Reference.No.","min_bid_price")
output <- merge(output, tender_lowest_price, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output$BidOverpricedVendorRecommendationIndicator <- 0
output$BidOverpricedVendorRecommendationIndicator[which(output$Tender.Recommended.by.Requestor == "X" &
output$Tender.Base.Offer > output$min_bid_price)] <- 1
output <- output[,c("bid_id","BidOverpricedVendorRecommendationIndicator")]
return(output)
}
calculateBidPriceSimilarityIndicator <-function() {
output <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Approved.Tender.Estimated")], by = c("Tender.Reference.No.","Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output$BidPriceSimilarityIndicator <- 0
output$BidPriceSimilarityIndicator <- 1 - abs(output$Approved.Tender.Estimated - output$Tender.Base.Offer)/output$Approved.Tender.Estimated
output$BidPriceSimilarityIndicator[which(is.na(output$BidPriceSimilarityIndicator))] <- 0
output$BidPriceSimilarityIndicator[which(output$BidPriceSimilarityIndicator < 0)] <- 0
output <- output[,c("bid_id","BidPriceSimilarityIndicator")]
return(output)
}
output
readInputData()
getwd()
source("apo_indicators.R")
readInputData()
calculateTenderIndicators()
source("apo_indicators.R")
calculateTenderIndicators()
getwd()
getwd()
setwd("C:/DAD/Procurement/R Code")
source("apo_indicators.R")
source("apo_indicators.R")
readInputData()
calculateTenderIndicators()
getwd()
source("apo_indicators.R")
source("apo_indicators.R")
source("apo_indicators.R")
getwd()
ind_df
ind_df
source("apo_indicators.R")
getwd()
result
ouput
#BID_DATA_DIRECTORY <- "/Users/adam/Documents/workspace/procurement/APO_bid_dataset/csv"
BID_DATA_DIRECTORY <- "C:/DAD/Procurement/R Code/Data"
readInputData <- function(dataDirectory = BID_DATA_DIRECTORY) {
#read data in
data_tender <<- read.csv(paste0(dataDirectory, "/tender_data.csv"), header = TRUE, sep = ",")
data_bid <<- read.csv(paste0(dataDirectory, "/bid_data.csv"), header = TRUE, sep = ",")
data_approval <<- read.csv(paste0(dataDirectory, "/approval_data.csv"), header = TRUE, sep = ",")
#postprocessing
data_tender <<- postProcessTender(data_tender)
data_bid <<- postProcessBids(data_bid)
data_approval <<- postProcessApprovals(data_approval)
}
postProcessTender <- function(inputDataset) {
inputDataset$Tender.Date <- as.Date(as.character(inputDataset$Tender.Date), format="%d.%m.%Y")
inputDataset$Tender.Notice.Date <- as.Date(as.character(inputDataset$Tender.Notice.Date), format="%d.%m.%Y")
inputDataset$Tender.Closing.Date <- as.Date(as.character(inputDataset$Tender.Closing.Date), format="%d.%m.%Y")
inputDataset$Approved.Tender.Estimated <- as.numeric(gsub(",","",as.character(inputDataset$Approved.Tender.Estimated)))
#filter out only the latest tender for each reference number
aggregatedInput_mid <- lapply(split(inputDataset[c("Requestor","Type.of.Tender","Type.of.Purchase","No..of.Tender.Submission.Received"
,"Tender.Notice.Date","Tender.Closing.Date","Approved.Tender.Estimated"
,"Fund.Available", "Tender.Date", "Tender.Reference.No.")], inputDataset[4])
, FUN = function(x) {
x <- x[which(x$Tender.Date == max(x$Tender.Date, na.rm = TRUE)),]
return(x[1,])
} )
aggregatedInput <- data.frame()
for(name in names(aggregatedInput_mid)) aggregatedInput <- rbind(aggregatedInput,aggregatedInput_mid[[name]])
inputDataset <- aggregatedInput
#remove all POs with empty requester
inputDataset <- inputDataset[which(inputDataset$Requestor != ""),]
return(inputDataset)
}
postProcessBids <- function(inputDataset) {
inputDataset$Tender.Date <- as.Date(as.character(inputDataset$Tender.Date), format="%d.%m.%Y")
inputDataset$Award.Price <- as.numeric(gsub(",","",as.character(inputDataset$Award.Price)))
inputDataset$Tender.Base.Offer <- as.numeric(gsub(",","",as.character(inputDataset$Tender.Base.Offer)))
#filter out only the latest tender for each reference number
aggregatedInput_mid <- lapply(split(inputDataset[c("Tenderer.Name", "Tender.Recommended.by.Requestor", "Award.Price"
, "Tender.Base.Offer", "Currency.Key"
, "Tender.Date", "Tender.Reference.No.")], inputDataset[4])
, FUN = function(x) {
x <- x[which(x$Tender.Date == max(x$Tender.Date, na.rm = TRUE)),]
return(x)
} )
aggregatedInput <- data.frame()
for(name in names(aggregatedInput_mid)) aggregatedInput <- rbind(aggregatedInput,aggregatedInput_mid[[name]])
inputDataset <- aggregatedInput
inputDataset$bid_id <- 1:nrow(inputDataset)
#remove all POs with empty requester
#inputDataset <- inputDataset[which(inputDataset$Requestor == ""),]
return(inputDataset)
}
postProcessApprovals <- function(inputDataset) {
inputDataset$Created.Date <- as.Date(as.character(inputDataset$Created.Date), format="%d.%m.%Y")
return(inputDataset)
}
######################################################## calculate Tender Indicators ###############################################
calculateTenderIndicators <- function() {
output <- calculateTenderLimitedTenderIndicator()
output <- merge ( output, calculateTenderConsumablesTenderIndicator(), all = TRUE)
output <- merge ( output, calculateTenderSingleBidIndicator(), all = TRUE)
output <- merge ( output, calculateTenderQuoteBorderValueIndicator(), all = TRUE)
output <- merge ( output, calculateTenderQuickClosingIndicator(), all = TRUE)
output <- merge ( output, calculateTenderFastEvaluationIndicator(), all = TRUE)
bidIndicators <- calculateBidIndicators()
#convert bid to tender indicators
output <- merge ( output, calculateTenderFrequentVendorInvitationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderFrequentVendorRecommendationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderOverpricedVendorRecommendationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderPriceSimilarityIndicator(bidIndicators), all = TRUE)
#calcualte overall indicator
output <- calculateTenderSuspicionIndicator(output)
write.csv(output ,file = paste0(dataDirectory, "/tender_indicators.csv"))
return(output)
}
################################################## calculate Tender Suspicion Indicator ############################################
calculateTenderSuspicionIndicator <- function(tenderIndicators) {
tenderIndicators$tenderSuspicionIndicator <- (tenderIndicators$TenderLimitedTenderIndicator * 0.1
+ tenderIndicators$TenderConsumablesTenderIndicator * 0.1
+ tenderIndicators$TenderSingleBidIndicator * 0.1
+ tenderIndicators$TenderQuoteBorderValueIndicator * 0.1
+ tenderIndicators$TenderQuickClosingIndicator * 0.1
+ tenderIndicators$TenderFastEvaluationIndicator * 0.1
+ tenderIndicators$TenderFrequentVendorInvitationIndicator * 0.1
+ tenderIndicators$TenderFrequentVendorRecommendationIndicator * 0.1
+ tenderIndicators$TenderOverpricedVendorRecommendationIndicator * 0.1
+ tenderIndicators$TenderPriceSimilarityIndicator * 0.1)
return(tenderIndicators)
}
######################################################## calculate Tender Indicators ###############################################
######################################################## calculate Tender Indicators ###############################################
calculateTenderLimitedTenderIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
limited_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender[which(data_tender$Type.of.Tender==2),],length)
colnames(limited_requester_tender_count) <- c("Requestor","limited_requester_tender_count")
requester_tenders <- merge(total_requester_tender_count, limited_requester_tender_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$limited_requester_tender_count[which(is.na(requester_tenders$limited_requester_tender_count))] <- 0
output <- data_tender
output <- merge(output, requester_tenders, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
output$TenderLimitedTenderIndicator <- output$limited_requester_tender_count / output$total_requester_tender_count
output <- output[,c("Tender.Reference.No.","TenderLimitedTenderIndicator")]
return(output)
}
calculateTenderConsumablesTenderIndicator <-function() {
output <- data_tender
output$TenderConsumablesTenderIndicator <- 0
output$TenderConsumablesTenderIndicator[which(output$Type.of.Purchase == 2)] <- 1
output <- output[,c("Tender.Reference.No.","TenderConsumablesTenderIndicator")]
return(output)
}
calculateTenderSingleBidIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
single_bid_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender[which(data_tender$No..of.Tender.Submission.Received==1),],length)
colnames(single_bid_requester_tender_count) <- c("Requestor","single_bid_requester_tender_count")
requester_tenders <- merge(total_requester_tender_count, single_bid_requester_tender_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$single_bid_requester_tender_count[which(is.na(requester_tenders$single_bid_requester_tender_count))] <- 0
output <- data_tender
output <- merge(output, requester_tenders, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
output$TenderSingleBidIndicator <- output$single_bid_requester_tender_count / output$total_requester_tender_count
output <- output[,c("Tender.Reference.No.","TenderSingleBidIndicator")]
return(output)
}
calculateTenderQuoteBorderValueIndicator <-function() {
tender_transaction_lower_range <- 70000
output <- data_tender
output$TenderQuoteBorderValueIndicator <- 0
output$TenderQuoteBorderValueIndicator[which(output$Approved.Tender.Estimated < tender_transaction_lower_range)] <- 1 - ((tender_transaction_lower_range - output$Approved.Tender.Estimated[which(output$Approved.Tender.Estimated < tender_transaction_lower_range)])  / tender_transaction_lower_range)
output <- output[,c("Tender.Reference.No.","TenderQuoteBorderValueIndicator")]
return(output)
}
calculateTenderQuickClosingIndicator <-function() {
output <- data_tender
output$days_diff <- as.numeric(difftime(output$Tender.Closing.Date, output$Tender.Notice.Date, units = "days"))
output$daysdiff_sd_diff <- abs(mean(output$days_diff, na.rm = TRUE) - output$days_diff) / sd(output$days_diff, na.rm = TRUE)
daysdiff_sd_diff_max <- max(output$daysdiff_sd_diff, na.rm = TRUE)
output$TenderQuickClosingIndicator <- 1 - (output$daysdiff_sd_diff/ daysdiff_sd_diff_max)
output <- output[,c("Tender.Reference.No.","TenderQuickClosingIndicator")]
output$TenderQuickClosingIndicator[which(is.na(output$TenderQuickClosingIndicator))] <- 0
return(output)
}
calculateTenderFastEvaluationIndicator <-function() {
output <- data_tender
output_approvals <-  aggregate(Created.Date ~ Tender.Reference.No., data_approval, max, na.rm= TRUE)
output <- merge(output, output_approvals, by = c("Tender.Reference.No.","Tender.Reference.No."),all.x = TRUE, all.y = FALSE)
output$days_diff <- as.numeric(difftime(output$Created.Date, output$Tender.Closing.Date, units = "days"))
output$daysdiff_sd_diff <- abs(mean(output$days_diff, na.rm = TRUE) - output$days_diff) / sd(output$days_diff, na.rm = TRUE)
daysdiff_sd_diff_max <- max(output$daysdiff_sd_diff, na.rm = TRUE)
output$TenderFastEvaluationIndicator <- 1 - (output$daysdiff_sd_diff/ daysdiff_sd_diff_max)
output <- output[,c("Tender.Reference.No.","TenderFastEvaluationIndicator")]
output$TenderFastEvaluationIndicator[which(is.na(output$TenderFastEvaluationIndicator))] <- 0
return(output)
}
############################ tender indicators converted from Big Indicators ############################
calculateTenderFrequentVendorInvitationIndicator <-function(bidIndicators) {
output <- data_tender
TenderFrequentVendorInvitationIndicator <- aggregate(BidFrequentVendorInvitationIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderFrequentVendorInvitationIndicator) <- c("Tender.Reference.No.","TenderFrequentVendorInvitationIndicator")
output <- merge(output, TenderFrequentVendorInvitationIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderFrequentVendorInvitationIndicator")]
output$TenderFrequentVendorInvitationIndicator[which(is.na(output$TenderFrequentVendorInvitationIndicator))] <- 0
return(output)
}
calculateTenderFrequentVendorRecommendationIndicator <-function(bidIndicators) {
output <- data_tender
TenderFrequentVendorRecommendationIndicator <- aggregate(BidFrequentVendorRecommendationIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderFrequentVendorRecommendationIndicator) <- c("Tender.Reference.No.","TenderFrequentVendorRecommendationIndicator")
output <- merge(output, TenderFrequentVendorRecommendationIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderFrequentVendorRecommendationIndicator")]
output$TenderFrequentVendorRecommendationIndicator[which(is.na(output$TenderFrequentVendorRecommendationIndicator))] <- 0
return(output)
}
calculateTenderOverpricedVendorRecommendationIndicator <-function(bidIndicators) {
output <- data_tender
TenderOverpricedVendorRecommendationIndicator <- aggregate(BidOverpricedVendorRecommendationIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderOverpricedVendorRecommendationIndicator) <- c("Tender.Reference.No.","TenderOverpricedVendorRecommendationIndicator")
output <- merge(output, TenderOverpricedVendorRecommendationIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderOverpricedVendorRecommendationIndicator")]
output$TenderOverpricedVendorRecommendationIndicator[which(is.na(output$TenderOverpricedVendorRecommendationIndicator))] <- 0
return(output)
}
calculateTenderPriceSimilarityIndicator <-function(bidIndicators) {
output <- data_tender
TenderPriceSimilarityIndicator <- aggregate(BidPriceSimilarityIndicator ~ Tender.Reference.No. , bidIndicators, max, na.rm= TRUE)
colnames(TenderPriceSimilarityIndicator) <- c("Tender.Reference.No.","TenderPriceSimilarityIndicator")
output <- merge(output, TenderPriceSimilarityIndicator, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output <- output[,c("Tender.Reference.No.","TenderPriceSimilarityIndicator")]
output$TenderPriceSimilarityIndicator[which(is.na(output$TenderPriceSimilarityIndicator))] <- 0
return(output)
}
######################################################## calculate Bid Indicators ###############################################
calculateBidIndicators <- function() {
output <- data_bid[,c("bid_id","Tender.Reference.No.","Tenderer.Name")]
output <- merge ( output, calculateBidFrequentVendorInvitationIndicator(), by = c("bid_id"), all = TRUE)
output <- merge ( output, calculateBidFrequentVendorRecommendationIndicator(), by = c("bid_id"), all = TRUE)
output <- merge ( output, calculateBidOverpricedVendorRecommendationIndicator(), by = c("bid_id"), all = TRUE)
output <- merge ( output, calculateBidPriceSimilarityIndicator(), by = c("bid_id"), all = TRUE)
return(output)
}
######################################################## calculate Bid Indicators ###############################################
calculateBidFrequentVendorInvitationIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
output_bid <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Requestor")], by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
vendor_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor+Tenderer.Name,output_bid,length)
colnames(vendor_requester_tender_count) <- c("Requestor","Tenderer.Name","vendor_requester_tender_count")
requester_tenders <- merge(total_requester_tender_count, vendor_requester_tender_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$vendor_requester_tender_count[which(is.na(requester_tenders$vendor_requester_tender_count))] <- 0
output <- merge(output_bid, requester_tenders, by = c("Requestor","Tenderer.Name"), all.x = TRUE, all.y=FALSE)
output$BidFrequentVendorInvitationIndicator <- output$vendor_requester_tender_count / output$total_requester_tender_count
output$BidFrequentVendorInvitationIndicator[which(is.na(output$BidFrequentVendorInvitationIndicator))] <- 0
output <- output[,c("bid_id","BidFrequentVendorInvitationIndicator")]
return(output)
}
calculateBidFrequentVendorRecommendationIndicator <-function() {
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
output_bid <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Requestor")], by = c("Tender.Reference.No.","Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
vendor_requester_recommendation_count <- aggregate(Tender.Reference.No.~Requestor+Tenderer.Name,output_bid[which(output_bid$Tender.Recommended.by.Requestor == "X"),],length)
colnames(vendor_requester_recommendation_count) <- c("Requestor","Tenderer.Name","vendor_requester_recommendation_count")
requester_tenders <- merge(total_requester_tender_count, vendor_requester_recommendation_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$vendor_requester_recommendation_count[which(is.na(requester_tenders$vendor_requester_recommendation_count))] <- 0
output <- merge(output_bid, requester_tenders, by = c("Requestor","Tenderer.Name"), all.x = TRUE, all.y=FALSE)
output$BidFrequentVendorRecommendationIndicator <- output$vendor_requester_recommendation_count / output$total_requester_tender_count
output$BidFrequentVendorRecommendationIndicator[which(is.na(output$BidFrequentVendorRecommendationIndicator))] <- 0
output <- output[,c("bid_id","BidFrequentVendorRecommendationIndicator")]
return(output)
}
calculateBidOverpricedVendorRecommendationIndicator <-function() {
output <- data_bid
tender_lowest_price <- aggregate(Tender.Base.Offer~Tender.Reference.No.,output,max,na.rm=TRUE)
colnames(tender_lowest_price) <- c("Tender.Reference.No.","min_bid_price")
output <- merge(output, tender_lowest_price, by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output$BidOverpricedVendorRecommendationIndicator <- 0
output$BidOverpricedVendorRecommendationIndicator[which(output$Tender.Recommended.by.Requestor == "X" &
output$Tender.Base.Offer > output$min_bid_price)] <- 1
output <- output[,c("bid_id","BidOverpricedVendorRecommendationIndicator")]
return(output)
}
calculateBidPriceSimilarityIndicator <-function() {
output <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Approved.Tender.Estimated")], by = c("Tender.Reference.No.","Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output$BidPriceSimilarityIndicator <- 0
output$BidPriceSimilarityIndicator <- 1 - abs(output$Approved.Tender.Estimated - output$Tender.Base.Offer)/output$Approved.Tender.Estimated
output$BidPriceSimilarityIndicator[which(is.na(output$BidPriceSimilarityIndicator))] <- 0
output$BidPriceSimilarityIndicator[which(output$BidPriceSimilarityIndicator < 0)] <- 0
output <- output[,c("bid_id","BidPriceSimilarityIndicator")]
return(output)
}
readInputData()
calculateTenderIndicators()
calculateTenderIndicators <- function() {
output <- calculateTenderLimitedTenderIndicator()
output <- merge ( output, calculateTenderConsumablesTenderIndicator(), all = TRUE)
output <- merge ( output, calculateTenderSingleBidIndicator(), all = TRUE)
output <- merge ( output, calculateTenderQuoteBorderValueIndicator(), all = TRUE)
output <- merge ( output, calculateTenderQuickClosingIndicator(), all = TRUE)
output <- merge ( output, calculateTenderFastEvaluationIndicator(), all = TRUE)
bidIndicators <- calculateBidIndicators()
#convert bid to tender indicators
output <- merge ( output, calculateTenderFrequentVendorInvitationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderFrequentVendorRecommendationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderOverpricedVendorRecommendationIndicator(bidIndicators), all = TRUE)
output <- merge ( output, calculateTenderPriceSimilarityIndicator(bidIndicators), all = TRUE)
#calcualte overall indicator
output <- calculateTenderSuspicionIndicator(output)
write.csv(output ,file = "tender_indicators.csv")
return(output)
}
calculateTenderIndicators()
readInputData()
calculateTenderIndicators()
getwd()
setwd("C:/DAD/Procurement/R Code/")
readInputData()
calculateTenderIndicators()
calculateTenderFrequentVendorRecommendationIndicator()
bidIndicators <- calculateBidIndicators()
bidIndicators
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
total_requester_tender_count
length(total_requester_tender_count)
length(total_requester_tender_count[Requestor])
total_requester_tender_count <- aggregate(Tender.Reference.No.~Requestor,data_tender,length)
colnames(total_requester_tender_count) <- c("Requestor","total_requester_tender_count")
output_bid <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Requestor")], by = c("Tender.Reference.No.","Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
output_bid
head(output_bid)
output_bid <- merge(data_bid, data_tender[,c("Tender.Reference.No.","Requestor")], by = c("Tender.Reference.No."), all.x = TRUE, all.y = FALSE)
head(output_bid)
vendor_requester_recommendation_count <- aggregate(Tender.Reference.No.~Requestor+Tenderer.Name,output_bid[which(output_bid$Tender.Recommended.by.Requestor == "X"),],length)
colnames(vendor_requester_recommendation_count) <- c("Requestor","Tenderer.Name","vendor_requester_recommendation_count")
requester_tenders <- merge(total_requester_tender_count, vendor_requester_recommendation_count, by = c("Requestor","Requestor"), all.x = TRUE, all.y=FALSE)
requester_tenders$vendor_requester_recommendation_count[which(is.na(requester_tenders$vendor_requester_recommendation_count))] <- 0
output <- merge(output_bid, requester_tenders, by = c("Requestor","Tenderer.Name"), all.x = TRUE, all.y=FALSE)
vendor_requester_recommendation_count
head(vendor_requester_recommendation_count)
write.csv(vendor_requester_recommendation_count,file = "vendor_requester_recommendation_count.csv"")
;
write.csv(vendor_requester_recommendation_count,file = "vendor_requester_recommendation_count.csv")
head(output_bid)
head(total_requester_tender_count)
write.csv(total_requester_tender_count,file = "total_requester_tender_count.csv")
